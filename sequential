
%%writefile sequential.c
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void matrixMultiply(int *A, int *B, int *C, int m, int n, int p) {
    int i, j, k;

    // Initialize matrix C
    for (i = 0; i < m; i++) {
        for (j = 0; j < p; j++) {
            C[i * p + j] = 0; // Set initial value of result matrix to 0
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < m; i++) {
        for (j = 0; j < p; j++) {
            for (k = 0; k < n; k++) {
                C[i * p + j] += A[i * n + k] * B[k * p + j];
            }
        }
    }
}

void fillRandom(int *matrix, int size) {
    for (int i = 0; i < size; i++) {
        matrix[i] = rand() % 100;  // Random integers between 0 and 99
    }
}

int main() {
    int sizes[] = {4, 16, 64, 256, 1024}; // Different matrix sizes for testing
    int numSizes = 5;

    for (int s = 0; s < numSizes; s++) {
        int m = sizes[s], n = sizes[s], p = sizes[s];
        int *A, *B, *C;
        clock_t start, end;
        double cpu_time_used;

        // Allocate memory
        A = (int*)malloc(m * n * sizeof(int));
        B = (int*)malloc(n * p * sizeof(int));
        C = (int*)malloc(m * p * sizeof(int));

        // Initialize matrices A and B with random values
        fillRandom(A, m * n);
        fillRandom(B, n * p);

        // Record the start time
        start = clock();

        // Call the matrix multiplication function
        matrixMultiply(A, B, C, m, n, p);

        // Record the end time
        end = clock();

        // Calculate the time used in the computation
        cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
        printf("Matrix size %dx%d, Time taken: %f seconds\n", m, n, cpu_time_used);

        // Free memory
        free(A);
        free(B);
        free(C);
    }

    return 0;
}
